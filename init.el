(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

(package-initialize)

(setq package-list '(starter-kit-bindings starter-kit starter-kit-eshell starter-kit-js starter-kit-lisp starter-kit-ruby ace-jump-mode golden-ratio smart-mode-line moe-theme flx-ido expand-region projectile rainbow-blocks rainbow-delimiters rainbow-identifiers hackernews smart-mode-line-powerline-theme go-mode ggtags edts org go-autocomplete))

(unless package-archive-contents
  (package-refresh-contents))

(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(fset 'yes-or-no-p 'y-or-n-p)

;(byte-recompile-directory (expand-file-name "~/.emacs.d/elpa") 0)

(require 'moe-theme)
(require 'recentf)
(require 'whitespace)
(require 'powerline)
(require 'golden-ratio)
(require 'expand-region)
(require 'ace-jump-mode)
(require 'saveplace)
(require 'rainbow-blocks)
(require 'rainbow-delimiters)
(require 'auto-complete)
(require 'auto-complete-config)
(require 'go-autocomplete)
(require 'go-mode-autoloads)


(when (window-system)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

(global-visual-line-mode t)
(global-hl-line-mode t)
;;(global-linum-mode t)
(global-whitespace-mode t)
(global-auto-complete-mode t)
(delete-selection-mode t)
(blink-cursor-mode t)
(show-paren-mode t)
(line-number-mode t)
(column-number-mode t)
(projectile-global-mode t)
;(global-rainbow-delimiters-mode)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-terminal-coding-system 'utf-8)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)
(setq-default tab-width 4)
(setq-default default-buffer-file-coding-system 'utf-8-unix)
(setq-default cursor-type 'hollow)
(setq-default save-place t)

(setq projectile-require-project-root nil)
(setq recentf-max-menu-items 25)
(setq ac-auto-show-menu t)
(setq ac-auto-start t)
(setq ac-quick-help-delay 0.3)
(setq ac-quick-help-height 30)
(setq ac-show-menu-immediately-on-auto-complete t)

(setq-default make-backup-file nil)
(setq-default auto-save-default nil)
(setq-default read-file-name-completion-ignore-case t)
(setq-default ring-bell-function (lambda () (message "*beep*")))
(setq-default blink-matching-paren-distance nil)
(setq-default default-major-mode 'text-mode)
(setq-default disabled-command-hook nil)
(setq-default ecb-options-version "2.40")
(setq-default mouse-wheel-mode t)
(setq-default pop-up-frame t)
(setq-default require-final-newline t)
(setq-default sentence-end-double-space nil)
(setq-default show-paren-style 'expression)
(setq-default speedbat t)
(setq-default truncate-partial-width-windows nil)
(setq-default whitespace-line-column 120)
(setq-default whitespace-style '(face lines-tail))
(setq-default undo-limit 100000)
(setq-default inhibit-startup-screen t)
(setq-default initial-scratch-message nil)
(setq-default windmove-default-keybindings nil)
(setq-default ido-enable-flex-matching t)
(setq-default ido-everywhere t)
(setq-default ido-use-filename-at-point 'guess)
(setq-default ido-create-new-buffer 'always)
(setq-default ido-use-faces nil)

;(setq langtool-language-tool-jar "~/langtool/languagetool-commandline.jar")

(ac-config-default)

(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'org-mode)
(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'clojure-mode-hook 'rainbow-blocks-mode)

(ido-mode t)
(flx-ido-mode t)
(recentf-mode t)
(golden-ratio-mode t)

(load-theme 'moe-dark t)
(powerline-default-theme)

(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C-c SPC") 'ace-jump-mode)

(define-key 'help-command (kbd "C-l") 'find-library)
(define-key 'help-command (kbd "C-f") 'find-function)
(define-key 'help-command (kbd "C-k") 'find-function-on-key)
(define-key 'help-command (kbd "C-v") 'find-variable)

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

;; Show the current function name in the header line
(which-function-mode)
(setq which-func-unknown "n/a")
(setq-default header-line-format '((which-func-mode ("" which-func-format " "))))
(setq mode-line-misc-info (assq-delete-all 'which-func-mode mode-line-misc-info))

;; (require 'ensime)
;; (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)

;; (setq jde-help-remote-file-exists-function '("beanshell"))
;; (add-to-list 'load-path "~/.emacs.d/jdee-2.4.1/lisp")
;; (load "jde")

(if (eq system-type 'windows-nt) (set-frame-font "Consolas-10"))
(if (eq system-type 'darwim) (set-frame-font "Consolas-10"))
(if (eq system-type 'gnu/linux) (set-frame-font "Consolas-10"))


;;; Go Programmming
(defun go-mode-setup ()
  (define-key (current-local-map) (kbd "C-c C-c") 'go-run)
  (go-eldoc-setup)
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  (local-set-key (kbd "M-.") 'godef-jump))
(add-hook 'go-mode-hook 'go-mode-setup)
